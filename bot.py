import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import requests


TOKEN = '6917219030:AAFcjgrlmZZQ8kYv_8htzcne_8FUi2cllQA'
EXCHANGERATE_API_KEY = '49bbbdf84d605feeb2f6d651'
ALPHA_VANTAGE_API_KEY = 'YEEL9R99DW0Z2JSR'

def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    emoji = "ü§ñ"
    update.message.reply_text(
        f"{emoji} –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user.first_name}! –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç STS. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_keyboard()
    )

def back(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    emoji = "ü§ñ"
    update.message.reply_text(
        " –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_keyboard()
    )

def currency_rates(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    keyboard = [
        [KeyboardButton("üá∫üá∏ –î–æ–ª–ª–∞—Ä –≤ —Ç–µ–Ω–≥–µ")],
        [KeyboardButton("üá™üá∫ –ï–≤—Ä–æ –≤ —Ç–µ–Ω–≥–µ")],
        [KeyboardButton("üá∑üá∫ –†—É–±–ª—å –≤ —Ç–µ–Ω–≥–µ")],
        [KeyboardButton("üá¨üáß –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–∞ –≤ —Ç–µ–Ω–≥–µ")],
        [KeyboardButton("üá¶üá™ –ê—Ä–∞–±—Å–∫–∏–π –¥–∏—Ä—Ö–∞–º –≤ —Ç–µ–Ω–≥–µ")],
        [KeyboardButton("üá∞üá¨ –ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º –≤ —Ç–µ–Ω–≥–µ")],
        [KeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞ –≤ —Ç–µ–Ω–≥–µ")],
        [KeyboardButton("üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å –≤ —Ç–µ–Ω–≥–µ")],
        [KeyboardButton("üá∞üá∑ –Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞ –≤ —Ç–µ–Ω–≥–µ")],
        [KeyboardButton("–Ω–∞–∑–∞–¥")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–∞:", reply_markup=reply_markup)

def get_exchange_rate(base_currency: str, target_currency: str) -> float:
    url = f'https://api.exchangerate-api.com/v4/latest/{base_currency}'
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        rate = data['rates'][target_currency]
        return rate
    else:
        return None

def show_exchange_rate(update: Update, context: CallbackContext, base_currency: str, target_currency: str) -> None:
    chat_id = update.message.chat_id
    rate = get_exchange_rate(base_currency, target_currency)

    if rate is not None:
        message = f'–ö—É—Ä—Å {base_currency} –≤ {target_currency}: {rate:.2f}'
    else:
        message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã."

    update.message.reply_text(message)

import requests

def get_crypto_rate() -> str:   #crypto
    url = f'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC,ETH,ETC,XMR,SOL,USDT,BNB,DOGE,XRP,AVAX&tsyms=KZT'
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()

        BTC = data['DISPLAY']['BTC']['KZT']['PRICE']
        ETH = data['DISPLAY']['ETH']['KZT']['PRICE']
        ETC = data['DISPLAY']['ETC']['KZT']['PRICE']
        XMR = data['DISPLAY']['XMR']['KZT']['PRICE']
        SOL = data['DISPLAY']['SOL']['KZT']['PRICE']
        USDT = data['DISPLAY']['USDT']['KZT']['PRICE']
        BNB = data['DISPLAY']['BNB']['KZT']['PRICE']
        DOGE = data['DISPLAY']['DOGE']['KZT']['PRICE']
        XRP = data['DISPLAY']['XRP']['KZT']['PRICE']
        AVAX = data['DISPLAY']['AVAX']['KZT']['PRICE']


        text = f'BTC = {BTC}\n'
        text += f'ETH = {ETH}\n'
        text += f'ETC = {ETC}\n'
        text += f'XMR = {XMR}\n'
        text += f'SOL = {SOL}\n'
        text += f'USDT = {USDT}\n'
        text += f'BNB = {BNB}\n'
        text += f'DOGE = {DOGE}\n'
        text += f'XRP = {XRP}\n'
        text += f'AVAX = {AVAX}\n'

        return text
    else:
        return None

def show_snp_prices(update: Update, context: CallbackContext) -> None:
    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ü–∏–π S&P500
    update.message.reply_text("–ó–¥–µ—Å—å –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π S&P500.")

def get_snp_prices() -> str:
    base_url = 'https://www.alphavantage.co/query'
    function = 'TIME_SERIES_DAILY'
    symbol = '^GSPC'  # –¢–∏–∫–µ—Ä S&P500
    api_key = ALPHA_VANTAGE_API_KEY

    params = {
        'function': function,
        'symbol': symbol,
        'apikey': api_key,
    }

    response = requests.get(base_url, params=params)

    if response.status_code == 200:
        data = response.json()

        # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è:
        last_refreshed = data['Meta Data']['3. Last Refreshed']
        close_price_today = data['Time Series (Daily)'][last_refreshed]['4. close']

        return f'–¶–µ–Ω–∞ S&P 500 –Ω–∞ {last_refreshed}: {close_price_today}'
    else:
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ü–∏–π S&P 500.'


def get_snp_rate(base_currency: str, target_currency: str) -> float:   #S&P500
    url = f'https://financialmodelingprep.com/api/v3/sp500_constituent (APIkey ) {base_currency}'
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        rate = data['rates'][target_currency]
        return rate
    else:
        return None

def handle_stock_choice(update: Update, context: CallbackContext) -> None:
    chosen_stock = update.message.text.upper()
    chat_id = update.message.chat_id

    if chosen_stock == '–ù–ê–ó–ê–î':
        start(update, context)
    elif chosen_stock == 'S&P 500':
        # –î–æ–±–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ü–∏–π S&P500
        show_snp_prices(update, context)
    else:
        show_stock_price(update, context, chosen_stock)



def handle_currency_choice(update: Update, context: CallbackContext) -> None:
    chosen_currency = update.message.text.lower()
    base_currency = 'KZT'  # –í–∞–ª—é—Ç–∞, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–π —Å–º–æ—Ç—Ä–∏–º –∫—É—Ä—Å

    currency_mapping = {
        'üá∫üá∏ –¥–æ–ª–ª–∞—Ä –≤ —Ç–µ–Ω–≥–µ': 'USD',
        'üá™üá∫ –µ–≤—Ä–æ –≤ —Ç–µ–Ω–≥–µ': 'EUR',
        'üá∑üá∫ —Ä—É–±–ª—å –≤ —Ç–µ–Ω–≥–µ': 'RUB',
        'üá¨üáß —Ñ—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–∞ –≤ —Ç–µ–Ω–≥–µ': 'GBP',
        'üá¶üá™ –∞—Ä–∞–±—Å–∫–∏–π –¥–∏—Ä—Ö–∞–º –≤ —Ç–µ–Ω–≥–µ': 'AED',
        'üá∞üá¨ –∫–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º –≤ —Ç–µ–Ω–≥–µ': 'KGS',
        'üá∫üá¶ —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞ –≤ —Ç–µ–Ω–≥–µ': 'UAH',
        'üá®üá≥ –∫–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å –≤ —Ç–µ–Ω–≥–µ': 'CNY',
        'üá∞üá∑ —é–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞ –≤ —Ç–µ–Ω–≥–µ': 'KRW',
    }

    if chosen_currency in currency_mapping:
        show_exchange_rate(update, context, currency_mapping[chosen_currency], base_currency)
    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")



def crypto_rates(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(get_crypto_rate()) #res

import requests

def get_price(symbol: str) -> str:   #S&P500
    url = f'https://finnhub.io/api/v1/quote?symbol={symbol}'
    headers_test = {'X-Finnhub-Token': 'cleip31r01qnc24e5vi0cleip31r01qnc24e5vig'}
    response = requests.get(url, headers=headers_test)
    rate = response.json()
    return rate


def snp_prices(update: Update, context: CallbackContext) -> None:
    # text = f'3M Co.' + get_price('AAPL')
    text = 'Please check headers'
   # text += f'Abbott Laboratories ' + get_price('abt')

    #3M Co. - mmm
    #Abbott Laboratories - abt
    #AbbVie Inc - abbv
    #Accenture plc - acn
    #Alphabet C (ex Google) - goog
    #Altria Inc. - mo
    #Amazon - amzn
    #AMD (Advanced Micro Devices) Inc. - amd
    #American Electric Power Co. Inc. - aep
    #American Express Co. - axp
    #American International Group (AIG) Inc. - aig
    #Adobe - adbe

    update.message.reply_text(text)

def financial_advice(update: Update, context: CallbackContext) -> None:
    advice_list = [
        "‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —á–∞—Å—Ç—å —Å–≤–æ–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∑–∞–ø–∞—Å –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
        "‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∏—Å–∫–∏ –∏ –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.",
        "‚úÖ –°–æ—Å—Ç–∞–≤—å—Ç–µ –±—é–¥–∂–µ—Ç –∏ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –µ–≥–æ, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.",
        "‚úÖ –î–µ–Ω—å–≥–∏ - —ç—Ç–æ –∫—Ä—É—Ç–æ.",
        "‚úÖ –ê –∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–ª–∏?!",
        "‚úÖ –ë–µ–∑–¥–µ–ª—å–µ - –∏–≥—Ä—É—à–∫–∞ –¥—å—è–≤–æ–ª–∞.",
        "‚úÖ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–æ–ª–≥–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏ –∏ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –ø–æ–ª–Ω–æ–º—É –ø–æ–≥–∞—à–µ–Ω–∏—é –∫—Ä–µ–¥–∏—Ç–æ–≤.",
        "‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±—É—á–∞–π—Ç–µ—Å—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª–µ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ —Å–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö.",
        "‚úÖ –°–æ–∑–¥–∞–π—Ç–µ –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ñ–æ–Ω–¥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π 3-6 –º–µ—Å—è—Ü–∞–º –≤–∞—à–∏—Ö –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, —á—Ç–æ–±—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –Ω–µ—É—Ä—è–¥–∏—Ü–∞–º.",
        "‚úÖ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –Ω–æ –∏ –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–µ–±—è –∏ —Å–≤–æ—é —Å–µ–º—å—é –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å—á–∞—Å—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è.",
        "‚úÖ –ò–∑—É—á–∞–π—Ç–µ —Ä—ã–Ω–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –∫—Ä—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏.",
        "‚úÖ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ñ—Ä–∏–ª–∞–Ω—Å, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.",
        "‚úÖ –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.",
        "‚úÖ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ–Ω—Å–∏—é —Å —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç, –≤–∫–ª–∞–¥—ã–≤–∞—è —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã.",
        "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–∏ –ø–æ –ø–æ–≥–∞—à–µ–Ω–∏—é –¥–æ–ª–≥–æ–≤ –∏ —Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π.",
        "‚úÖ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –±—Ä–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ –∏–ø–æ—Ç–µ–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è.",
        "‚úÖ –ò–∑–±–µ–≥–∞–π—Ç–µ —á—Ä–µ–∑–º–µ—Ä–Ω—ã—Ö —Ç—Ä–∞—Ç –Ω–∞ –Ω–µ–Ω—É–∂–Ω—ã–µ –≤–µ—â–∏; –æ—Ü–µ–Ω–∏—Ç–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–∫—É–ø–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞.",
        "‚úÖ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–æ–≤–µ—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏."
    ] #—Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–¥–æ–º —Å–æ–≤–µ—Ç–æ–≤

    selected_advice = random.choice(advice_list)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['financial_advice'] = selected_advice

    update.message.reply_text(selected_advice)



def get_keyboard():
    keyboard = [
        [KeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")],
        [KeyboardButton("–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")],
        [KeyboardButton("–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π")],
        [KeyboardButton("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def main() -> None:
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex('^–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç$'), financial_advice))
    dp.add_handler(MessageHandler(Filters.regex('^–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç$'), currency_rates))
    dp.add_handler(MessageHandler(Filters.regex(
        '^üá∫üá∏ –î–æ–ª–ª–∞—Ä –≤ —Ç–µ–Ω–≥–µ$|^üá™üá∫ –ï–≤—Ä–æ –≤ —Ç–µ–Ω–≥–µ$|^üá∑üá∫ –†—É–±–ª—å –≤ —Ç–µ–Ω–≥–µ$|^üá¨üáß –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–∞ –≤ —Ç–µ–Ω–≥–µ$|^üá¶üá™ –ê—Ä–∞–±—Å–∫–∏–π –¥–∏—Ä—Ö–∞–º –≤ —Ç–µ–Ω–≥–µ$|^üá∞üá¨ –ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º –≤ —Ç–µ–Ω–≥–µ$|^üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞ –≤ —Ç–µ–Ω–≥–µ$|^üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å –≤ —Ç–µ–Ω–≥–µ$|^üá∞üá∑ –Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞ –≤ —Ç–µ–Ω–≥–µ$'),
                                  handle_currency_choice))
    dp.add_handler(MessageHandler(Filters.regex('^–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç$'), crypto_rates))
    dp.add_handler(MessageHandler(Filters.regex('^–Ω–∞–∑–∞–¥$'), back))
    dp.add_handler(MessageHandler(Filters.regex('^–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π$'), snp_prices))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
